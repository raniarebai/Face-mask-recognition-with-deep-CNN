# -*- coding: utf-8 -*-
"""new_model_pfa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BIaawQ80Gkv3Rbybtc1ogKuL2Dt3irIm

## PFA
### Implémentation
---
*Importation des bibliothèques*
"""

import tensorflow as tf

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, accuracy_score

"""**Chargement des données à partir du Google Drive**

*Assemblage Google Drive dans Colaboratory*
"""

from google.colab import drive
drive.mount('/content/drive')

#!unzip Dataset_Final_Bruit.zip

cd /content/drive/MyDrive/Dataset_Final_Bruit/

ls

"""*Ensemble d'apprentissage* """

train_ds=tf.keras.preprocessing.image_dataset_from_directory(directory="Train",image_size=(32,32),
                                                             color_mode='rgb',batch_size=128)

"""**1.**  Décompresser le fichier du dataset *Dataset Final.zip*

**2.**  Charger les données d’apprentissage, de validation et de test de la base de données **Dataset_Final**

Ensemble de validation
"""

val_ds=tf.keras.preprocessing.image_dataset_from_directory(directory="Validation",image_size=(32,32),
                                                             color_mode='rgb',batch_size=128)

"""*Ensemble de test*"""

test_ds=tf.keras.preprocessing.image_dataset_from_directory(directory="Test",image_size=(32,32),
                                                             color_mode='rgb',batch_size=128)

class_names = train_ds.class_names
plt.figure(figsize=(5, 5))
for image,labels in train_ds.take(1):
  for i in range(6):
    ax=plt.subplot(2,3,i+1)
    img=image[i].numpy().astype("uint8")
    plt.imshow(img)
    plt.title(class_names[labels[i]])
    plt.axis("off")

AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)
test_ds = test_ds.cache().prefetch(buffer_size=AUTOTUNE)

model=tf.keras.applications.vgg16.VGG16(include_top=True,classes=2,weights="/content/drive/MyDrive/checkpoint16.h5",input_shape=(32,32,3))

tf.keras.utils.plot_model(model,show_shapes=True)

"""**Spécifier l’optimiseur à adam, le nombre d’époques à 50 **"""

model.compile(optimizer="adam",loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])

model.summary()

history_vgg16=model.fit(train_ds,validation_data=val_ds,epochs=10)

import matplotlib.pyplot as plt
plt.plot(history_vgg16.history["accuracy"])
plt.plot(history_vgg16.history['val_accuracy'])
plt.plot(history_vgg16.history['loss'])
plt.plot(history_vgg16.history['val_loss'])
plt.title("model accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Accuracy","Validation Accuracy","loss","Validation Loss"])
plt.show()

print(history_vgg16.history.keys())
plt.plot(history_vgg16.history['accuracy'])
plt.plot(history_vgg16.history['val_accuracy'])
plt.title('Courbe Accuracy-Epoque')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'])
#plt.savefig('c_Acuracy.png')
plt.show()

results_vgg16 = model.evaluate(test_ds,verbose=0)
print('Test Accuracy: {:.2f}%'.format(results_vgg16[1]*100))

apprentissage_vgg16= model.evaluate(train_ds,verbose=0)
print('train Accuracy: {:.2f}%'.format(apprentissage_vgg16[1]*100))

validation_vgg16 = model.evaluate(val_ds,verbose=0)
print('val Accuracy: {:.2f}%'.format(validation_vgg16[1]*100))

"""**3.**<br>
$\clubsuit$ ***modèle VGG19***
"""

model_vgg19=tf.keras.applications.vgg19.VGG19(include_top=True,classes=2,weights="/content/drive/MyDrive/checkpoint19.h5",input_shape=(32,32,3))

model_vgg19.compile(optimizer="adam",loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])

model_vgg19.summary

history_vgg19=model_vgg19.fit(train_ds,validation_data=val_ds,epochs=10)

print(history_vgg19.history.keys())
plt.plot(history_vgg19.history['accuracy'])
plt.plot(history_vgg19.history['val_accuracy'])
plt.title('Courbe Accuracy-Epoque')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'])
plt.savefig('c_Acuracy.png')
plt.show()

results_vgg19 = model_vgg19.evaluate(test_ds,verbose=0)
print('Test Accuracy: {:.2f}%'.format(results_vgg19[1]*100))

apprentissage_vgg19= model_vgg19.evaluate(train_ds,verbose=0)
print('train Accuracy: {:.2f}%'.format(apprentissage_vgg19[1]*100))

validation_vgg19 = model_vgg19.evaluate(val_ds,verbose=0)
print('val Accuracy: {:.2f}%'.format(validation_vgg19[1]*100))

"""**3.**<br>
$\clubsuit$ ***modèle RESNET50***
"""

model_resnet50=tf.keras.applications.resnet50.ResNet50(
include_top=True,classes=2,𝐰𝐞𝐢𝐠𝐡𝐭𝐬="/content/drive/MyDrive/checkpoint50.h5", input_shape=(32,32,3),
 𝐩𝐨𝐨𝐥𝐢𝐧𝐠=None,  classifier_activation='softmax')

tf.keras.utils.plot_model(model_resnet50,show_shapes=True)

model_resnet50.compile(optimizer="adam",loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])

model_resnet50.summary

history_resnet50=model_resnet50.fit(train_ds,validation_data=val_ds,epochs=10)

print(history_resnet50.history.keys())
plt.plot(history_resnet50.history['accuracy'])
plt.plot(history_resnet50.history['val_accuracy'])
plt.title('Courbe Accuracy-Epoque')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'])
#plt.savefig('c_Acuracy.png')
plt.show()

results_resnet50 = model_resnet50.evaluate(test_ds,verbose=0)
print('Test Accuracy: {:.2f}%'.format(results_resnet50[1]*100))

apprentissage_resnet50= model_resnet50.evaluate(train_ds,verbose=0)
print('train Accuracy: {:.2f}%'.format(apprentissage_resnet50[1]*100))

validation_resnet50 = model_resnet50.evaluate(val_ds,verbose=0)
print('val Accuracy: {:.2f}%'.format(validation_resnet50[1]*100))

"""**3.**<br>
$\clubsuit$ ***modèle RESNET152***
"""

model_resnet152=tf.keras.applications.resnet.ResNet152(
include_top=True,classes=2,𝐰𝐞𝐢𝐠𝐡𝐭𝐬="/content/drive/MyDrive/checkpoint152.h5", input_shape=(32,32,3),
 𝐩𝐨𝐨𝐥𝐢𝐧𝐠=None,  classifier_activation='softmax')

tf.keras.utils.plot_model(model_resnet152,show_shapes=True)

model_resnet152.compile(optimizer="adam",loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])

model_resnet152.summary

history_resnet152=model_resnet152.fit(train_ds,validation_data=val_ds,epochs=10)

print(history_resnet152.history.keys())
plt.plot(history_resnet152.history['accuracy'])
plt.plot(history_resnet152.history['val_accuracy'])
plt.title('Courbe Accuracy-Epoque')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'])
plt.show()

results_resnet152 = model_resnet152.evaluate(test_ds,verbose=0)
print('Test Accuracy: {:.2f}%'.format(results_resnet152[1]*100))

apprentissage_resnet152= model_resnet152.evaluate(train_ds,verbose=0)
print('train Accuracy: {:.2f}%'.format(apprentissage_resnet152[1]*100))

validation_resnet152 = model_resnet152.evaluate(val_ds,verbose=0)
print('val Accuracy: {:.2f}%'.format(validation_resnet152[1]*100))

"""**3.**<br>
$\clubsuit$ ***modèle MobileNet***
"""

mobile_net = tf.keras.applications.mobilenet.MobileNet(include_top=True,classes=2,input_shape=(32,32,3),weights="/content/drive/MyDrive/PFA/checkpointmobile.h5")

tf.keras.utils.plot_model(mobile_net,show_shapes=True)

mobile_net.compile(optimizer="adam",loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])

mobile_net.summary

history_mobile_net=mobile_net.fit(train_ds,validation_data=val_ds,epochs=5)

print(history_mobile_net.history.keys())
plt.plot(history_mobile_net.history['accuracy'])
plt.plot(history_mobile_net.history['val_accuracy'])
plt.title('Courbe Accuracy-Epoque')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'])
plt.savefig('c_Acuracy.png')
plt.show()

results_mobile_net = mobile_net.evaluate(test_ds,verbose=0)
print('Test Accuracy: {:.2f}%'.format(results_mobile_net [1]*100))

apprentissage_mobile_net = mobile_net.evaluate(train_ds,verbose=0)
print('train Accuracy: {:.2f}%'.format(apprentissage_mobile_net [1]*100))

validation_mobile_net  = mobile_net.evaluate(val_ds,verbose=0)
print('val Accuracy: {:.2f}%'.format(validation_mobile_net [1]*100))